
import com.excellentsystem.AuriSteel.DAO.BarangDAO;
import com.excellentsystem.AuriSteel.DAO.CustomerDAO;
import com.excellentsystem.AuriSteel.DAO.KeuanganDAO;
import com.excellentsystem.AuriSteel.DAO.LogBarangDAO;
import com.excellentsystem.AuriSteel.DAO.PenjualanDetailDAO;
import com.excellentsystem.AuriSteel.DAO.PenjualanHeadDAO;
import com.excellentsystem.AuriSteel.Model.Barang;
import com.excellentsystem.AuriSteel.Model.Customer;
import com.excellentsystem.AuriSteel.Model.Keuangan;
import com.excellentsystem.AuriSteel.Model.LogBahan;
import com.excellentsystem.AuriSteel.Model.LogBarang;
import com.excellentsystem.AuriSteel.Model.PenjualanDetail;
import com.excellentsystem.AuriSteel.Model.PenjualanHead;
import com.excellentsystem.AuriSteel.Model.StokBahan;
import com.excellentsystem.AuriSteel.Model.StokBarang;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author excellent
 */
public class Main extends javax.swing.JFrame{
    public void run(String str){  
        resultTextArea.append(str);
    }
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        recreateStokBarang = new javax.swing.JButton();
        recreateStokBahan = new javax.swing.JButton();
        recreateLogBahan = new javax.swing.JButton();
        recreateLogBarang = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        noPembelianField = new javax.swing.JTextField();
        kodeBarangStokBarangField = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        tanggalField = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Reset Log & Nilai Barang");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Fix No Keuangan");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        recreateStokBarang.setText("Re-create Stok Barang");
        recreateStokBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recreateStokBarangActionPerformed(evt);
            }
        });

        recreateStokBahan.setText("Re-create Stok Bahan");
        recreateStokBahan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recreateStokBahanActionPerformed(evt);
            }
        });

        recreateLogBahan.setText("Re-create Log Bahan");
        recreateLogBahan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recreateLogBahanActionPerformed(evt);
            }
        });

        recreateLogBarang.setText("Recreate Log Barang");
        recreateLogBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recreateLogBarangActionPerformed(evt);
            }
        });

        jButton2.setText("Fix hutang deposit customer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Fix bahan, log bahan & stok Bahan");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cek Hutang & Piutang");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        tanggalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanggalFieldActionPerformed(evt);
            }
        });

        jButton6.setText("Cek Stok bahan & barang");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane1.setViewportView(resultTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(recreateStokBarang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(recreateStokBahan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(recreateLogBahan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(recreateLogBarang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(noPembelianField, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(kodeBarangStokBarangField))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 250, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tanggalField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(tanggalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recreateLogBarang)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recreateStokBarang)
                    .addComponent(kodeBarangStokBarangField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recreateStokBahan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recreateLogBahan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(noPembelianField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            run(new Date() + " reset log barang mulai");
            System.out.println(new Date() + " reset log barang mulai");
            PreparedStatement ps = con.prepareStatement("select * from tt_log_barang "
                    + " order by kode_barang,kode_gudang,tanggal");
            ResultSet rs = ps.executeQuery();
            double stok = 0;
            double nilai = 0;
            List<LogBarang> listLogBarang = new ArrayList<>();
            while (rs.next()) {
                boolean status = true;
                for (LogBarang l : listLogBarang) {
                    if (l.getKodeBarang().equals(rs.getString(2))
                            && l.getKodeGudang().equals(rs.getString(3))) {
                        status = false;
                    }
                }
                if (status) {
                    run(new Date() + " create list stok " + rs.getString(2));
                    System.out.println(new Date() + " create list stok " + rs.getString(2));
                    stok = 0;
                    nilai = 0;
                }
                LogBarang log = new LogBarang();
                log.setTanggal(rs.getString(1));
                log.setKodeBarang(rs.getString(2));
                log.setKodeGudang(rs.getString(3));
                log.setKategori(rs.getString(4));
                log.setKeterangan(rs.getString(5));

                log.setStokAwal(stok);
                log.setNilaiAwal(nilai);

                if (log.getKategori().equals("Penjualan")) {
                    log.setStokMasuk(rs.getDouble(8));
                    log.setNilaiMasuk(rs.getDouble(9));
                    if (stok != 0) {
                        log.setStokKeluar(rs.getDouble(10));
                        log.setNilaiKeluar(nilai / stok * log.getStokKeluar());
                    } else {
                        log.setStokKeluar(rs.getDouble(10));
                        log.setNilaiKeluar(rs.getDouble(11));
                    }
                } else {
                    log.setStokMasuk(rs.getDouble(8));
                    log.setNilaiMasuk(rs.getDouble(9));
                    log.setStokKeluar(rs.getDouble(10));
                    log.setNilaiKeluar(rs.getDouble(11));
                }
                stok = stok + log.getStokMasuk() - log.getStokKeluar();
                nilai = nilai + log.getNilaiMasuk() - log.getNilaiKeluar();

                log.setStokAkhir(stok);
                log.setNilaiAkhir(nilai);

                listLogBarang.add(log);
            }
            run(new Date() + " create list log barang selesai");
            System.out.println(new Date() + " create list log barang selesai");
            List<PenjualanHead> listPenjualan = new ArrayList<>();
            for (LogBarang l : listLogBarang) {
                LogBarangDAO.update(con, l);

                if (l.getKategori().equals("Penjualan")) {
                    ps = con.prepareStatement("update tt_penjualan_detail set "
                            + " nilai = ? where no_penjualan = ? and kode_barang = ?");
                    ps.setDouble(1, l.getNilaiKeluar() / l.getStokKeluar());
                    ps.setString(2, l.getKeterangan());
                    ps.setString(3, l.getKodeBarang());
                    ps.executeUpdate();

                    PenjualanHead p = PenjualanHeadDAO.get(con, l.getKeterangan());
                    if (!listPenjualan.contains(p)) {
                        listPenjualan.add(p);
                    }
                }
                run(listLogBarang.indexOf(l)+" of "+listLogBarang.size());
                System.out.println(listLogBarang.indexOf(l)+" of "+listLogBarang.size());
            }
            run(new Date() + " update nilai penjualan selesai");
            System.out.println(new Date() + " update nilai penjualan selesai");
            for (PenjualanHead p : listPenjualan) {
                KeuanganDAO.delete(con, "Stok Barang", p.getKodeGudang(), "Penjualan - " + p.getNoPenjualan());
                KeuanganDAO.delete(con, "HPP", "Penjualan", "Penjualan - " + p.getNoPenjualan());

                List<PenjualanDetail> listPenjualanDetail = PenjualanDetailDAO.getAllPenjualanDetail(con, p.getNoPenjualan());
                Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(p.getTglPenjualan());
                double hpp = 0;
                for (PenjualanDetail d : listPenjualanDetail) {
                    hpp = hpp + d.getNilai() * d.getQty();
                }
                Keuangan keu = new Keuangan();
                keu.setNoKeuangan(KeuanganDAO.getId(con, date));
                keu.setTglKeuangan(p.getTglPenjualan());
                keu.setTipeKeuangan("Stok Barang");
                keu.setKategori(p.getKodeGudang());
                keu.setDeskripsi("Penjualan - " + p.getNoPenjualan());
                keu.setJumlahRp(-hpp);
                keu.setKodeUser(p.getKodeUser());
                KeuanganDAO.insert(con, keu);

                Keuangan keu2 = new Keuangan();
                keu2.setNoKeuangan(KeuanganDAO.getId(con, date));
                keu2.setTglKeuangan(p.getTglPenjualan());
                keu2.setTipeKeuangan("HPP");
                keu2.setKategori("Penjualan");
                keu2.setDeskripsi("Penjualan - " + p.getNoPenjualan());
                keu2.setJumlahRp(hpp);
                keu2.setKodeUser(p.getKodeUser());
                KeuanganDAO.insert(con, keu2);
                
                System.out.println(listPenjualan.indexOf(p)+" of "+listPenjualan.size());
            }
            System.out.println(new Date() + "Reset Nilai Log Barang Selesai");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            PreparedStatement ps = con.prepareStatement("select * from tt_keuangan order by tgl_keuangan");
            ResultSet rs = ps.executeQuery();
            int no = 1;
            String tanggal = "";
            List<Keuangan> listKeuangan = new ArrayList<>();
            while (rs.next()) {
                String tgl = new SimpleDateFormat("yyMMdd").format(
                        new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rs.getString(2)));
                if (!tgl.equals(tanggal)) {
                    tanggal = tgl;
                    no = 1;
                } else {
                    no = no + 1;
                }
                Keuangan keu = new Keuangan();
                keu.setNoKeuangan("KK-" + tgl + "-" + new DecimalFormat("0000").format(no));
                keu.setTglKeuangan(rs.getString(2));
                keu.setTipeKeuangan(rs.getString(3));
                keu.setKategori(rs.getString(4));
                keu.setDeskripsi(rs.getString(5));
                keu.setJumlahRp(rs.getDouble(6));
                keu.setKodeUser(rs.getString(7));
                listKeuangan.add(keu);
            }
            for (Keuangan keu : listKeuangan) {
                PreparedStatement ps2 = con.prepareStatement("insert into tt_keuangan_temp values(?,?,?,?,?,?,?)");
                ps2.setString(1, keu.getNoKeuangan());
                ps2.setString(2, keu.getTglKeuangan());
                ps2.setString(3, keu.getTipeKeuangan());
                ps2.setString(4, keu.getKategori());
                ps2.setString(5, keu.getDeskripsi());
                ps2.setDouble(6, keu.getJumlahRp());
                ps2.setString(7, keu.getKodeUser());
                ps2.executeUpdate();
            }
            System.out.println("Fix No Keuangan Selesai");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void recreateStokBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recreateStokBarangActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            System.out.println(new Date() + " start");
            String kodeGudang = kodeBarangStokBarangField.getText();
            List<StokBarang> listStokBarang = new ArrayList<>();
            List<Barang> listBarang = BarangDAO.getAllByStatus(con, "true");
            for (Barang b : listBarang) {
                StokBarang s = new StokBarang();
                s.setTanggal("2016-01-01");
                s.setKodeBarang(b.getKodeBarang());
                s.setKodeGudang(kodeGudang);
                s.setStokAwal(0);
                s.setStokMasuk(0);
                s.setStokKeluar(0);
                s.setStokAkhir(0);
                listStokBarang.add(s);
            }
            System.out.println(new Date() + " stok awal");
            ResultSet rs = con.prepareStatement("select left(tgl_produksi,10),kode_barang,sum(qty) "
                    + " from tt_produksi_head a,tt_produksi_detail_barang b "
                    + " where a.kode_produksi=b.kode_produksi and a.kode_gudang='" + kodeGudang + "' "
                    + " group by left(tgl_produksi,10), kode_barang").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBarang s : listStokBarang) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBarang().equals(rs.getString(2))) {
                        s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBarang stok = new StokBarang();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBarang(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(rs.getDouble(3));
                    stok.setStokKeluar(0);
                    stok.setStokAkhir(0);
                    listStokBarang.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_pembelian,10),kode_barang,sum(qty) "
                    + " from tt_pembelian_barang_head a,tt_pembelian_barang_detail b "
                    + " where a.no_pembelian=b.no_pembelian and a.kode_gudang='" + kodeGudang + "' and status='true' "
                    + " group by left(tgl_pembelian,10), kode_barang").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBarang s : listStokBarang) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBarang().equals(rs.getString(2))) {
                        s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBarang stok = new StokBarang();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBarang(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(rs.getDouble(3));
                    stok.setStokKeluar(0);
                    stok.setStokAkhir(0);
                    listStokBarang.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_pindah,10),kode_barang,sum(qty) "
                    + " from tt_pindah_barang_head a,tt_pindah_barang_detail b "
                    + " where a.no_pindah=b.no_pindah and a.gudang_tujuan='" + kodeGudang + "'  and status='true' "
                    + " group by left(tgl_pindah,10), kode_barang").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBarang s : listStokBarang) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBarang().equals(rs.getString(2))) {
                        s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBarang stok = new StokBarang();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBarang(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(rs.getDouble(3));
                    stok.setStokKeluar(0);
                    stok.setStokAkhir(0);
                    listStokBarang.add(stok);
                }
            }
            System.out.println(new Date() + " stok masuk");
            rs = con.prepareStatement("select left(tgl_batal,10),kode_barang, sum(qty) "
                    + " from tt_produksi_head a,tt_produksi_detail_barang b "
                    + " where a.kode_produksi=b.kode_produksi and status ='false' and a.kode_gudang='" + kodeGudang + "' "
                    + " group by left(tgl_batal,10),kode_barang ").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBarang s : listStokBarang) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBarang().equals(rs.getString(2))) {
                        s.setStokKeluar(s.getStokKeluar() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBarang stok = new StokBarang();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBarang(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(0);
                    stok.setStokKeluar(rs.getDouble(3));
                    stok.setStokAkhir(0);
                    listStokBarang.add(stok);
                }
            }
            System.out.println(new Date() + " stok batal masuk");
            rs = con.prepareStatement("select left(tgl_penjualan,10),kode_barang,sum(qty) "
                    + " from tt_penjualan_head a,tt_penjualan_detail b "
                    + " where a.no_penjualan=b.no_penjualan and status ='true' and a.kode_gudang='" + kodeGudang + "' "
                    + " group by left(tgl_penjualan,10),kode_barang").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBarang s : listStokBarang) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBarang().equals(rs.getString(2))) {
                        s.setStokKeluar(s.getStokKeluar() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBarang stok = new StokBarang();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBarang(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(0);
                    stok.setStokKeluar(rs.getDouble(3));
                    stok.setStokAkhir(0);
                    listStokBarang.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_pindah,10),kode_barang,sum(qty) "
                    + " from tt_pindah_barang_head a,tt_pindah_barang_detail b "
                    + " where a.no_pindah=b.no_pindah and a.gudang_asal='" + kodeGudang + "'  and status='true' "
                    + " group by left(tgl_pindah,10), kode_barang").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBarang s : listStokBarang) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBarang().equals(rs.getString(2))) {
                        s.setStokKeluar(s.getStokKeluar() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBarang stok = new StokBarang();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBarang(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(0);
                    stok.setStokKeluar(rs.getDouble(3));
                    stok.setStokAkhir(0);
                    listStokBarang.add(stok);
                }
            }
            System.out.println(new Date() + " stok keluar");
            if (kodeGudang.equals("SMG")) {
                rs = con.prepareStatement("select left(tgl_retur,10),kode_barang,sum(qty) "
                        + " from tt_retur_penjualan_head a,tt_retur_penjualan_detail b "
                        + " where a.no_retur_penjualan=b.no_retur_penjualan and status ='true' "
                        + " group by left(tgl_retur,10),kode_barang").executeQuery();
                while (rs.next()) {
                    boolean status = true;
                    for (StokBarang s : listStokBarang) {
                        if (s.getTanggal().equals(rs.getString(1))
                                && s.getKodeBarang().equals(rs.getString(2))) {
                            s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                            status = false;
                        }
                    }
                    if (status) {
                        StokBarang stok = new StokBarang();
                        stok.setTanggal(rs.getString(1));
                        stok.setKodeBarang(rs.getString(2));
                        stok.setKodeGudang(kodeGudang);
                        stok.setStokAwal(0);
                        stok.setStokMasuk(rs.getDouble(3));
                        stok.setStokKeluar(0);
                        stok.setStokAkhir(0);
                        listStokBarang.add(stok);
                    }
                }
            }
            System.out.println(new Date() + " stok batal keluar");
            rs = con.prepareStatement("select left(tgl_penyesuaian,10),kode_barang,sum(qty) "
                    + " from tt_penyesuaian_stok_barang "
                    + " where kode_gudang='" + kodeGudang + "' and status = 'true' "
                    + " group by left(tgl_penyesuaian,10), kode_barang").executeQuery();
            while (rs.next()) {
                if (rs.getDouble(3) < 0) {
                    boolean status = true;
                    for (StokBarang s : listStokBarang) {
                        if (s.getTanggal().equals(rs.getString(1))
                                && s.getKodeBarang().equals(rs.getString(2))) {
                            s.setStokKeluar(s.getStokKeluar() + (rs.getDouble(3) * -1));
                            status = false;
                        }
                    }
                    if (status) {
                        StokBarang stok = new StokBarang();
                        stok.setTanggal(rs.getString(1));
                        stok.setKodeBarang(rs.getString(2));
                        stok.setKodeGudang(kodeGudang);
                        stok.setStokAwal(0);
                        stok.setStokMasuk(0);
                        stok.setStokKeluar((rs.getDouble(3) * -1));
                        stok.setStokAkhir(0);
                        listStokBarang.add(stok);
                    }
                } else {
                    boolean status = true;
                    for (StokBarang s : listStokBarang) {
                        if (s.getTanggal().equals(rs.getString(1))
                                && s.getKodeBarang().equals(rs.getString(2))) {
                            s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                            status = false;
                        }
                    }
                    if (status) {
                        StokBarang stok = new StokBarang();
                        stok.setTanggal(rs.getString(1));
                        stok.setKodeBarang(rs.getString(2));
                        stok.setKodeGudang(kodeGudang);
                        stok.setStokAwal(0);
                        stok.setStokMasuk(rs.getDouble(3));
                        stok.setStokKeluar(0);
                        stok.setStokAkhir(0);
                        listStokBarang.add(stok);
                    }
                }
            }
            Collections.sort(listStokBarang, (Object o1, Object o2) -> {
                int sComp2 = ((StokBarang) o1).getKodeBarang().compareTo(((StokBarang) o2).getKodeBarang());
                if (sComp2 == 0) {
                    return ((StokBarang) o1).getTanggal().compareTo(((StokBarang) o2).getTanggal());
                }
                return sComp2;
            });
            double stok = 0;
            List<StokBarang> listStok = new ArrayList<>();
            for (StokBarang s : listStokBarang) {
                boolean status = true;
                for (StokBarang st : listStok) {
                    if (st.getKodeBarang().equals(s.getKodeBarang())) {
                        status = false;
                    }
                }
                if (status) {
                    stok = 0;
                }
                s.setStokAwal(stok);
                stok = stok + s.getStokMasuk() - s.getStokKeluar();
                s.setStokAkhir(stok);

                listStok.add(s);
            }
            for (StokBarang s : listStokBarang) {
                System.out.println(new Date() + " " + s.getTanggal() + " : " + s.getKodeBarang() + " - " + s.getKodeGudang());
                PreparedStatement ps = con.prepareStatement("insert into tt_stok_barang_temp values(?,?,?,?,?,?,?)");
                ps.setString(1, s.getTanggal());
                ps.setString(2, s.getKodeBarang());
                ps.setString(3, s.getKodeGudang());
                ps.setDouble(4, s.getStokAwal());
                ps.setDouble(5, s.getStokMasuk());
                ps.setDouble(6, s.getStokKeluar());
                ps.setDouble(7, s.getStokAkhir());
                ps.executeUpdate();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_recreateStokBarangActionPerformed

    private void recreateStokBahanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recreateStokBahanActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            String kodeGudang = kodeBarangStokBarangField.getText();
            List<StokBahan> listStokBahan = new ArrayList<>();
            ResultSet rs = con.prepareStatement("select left(tgl_pembelian,10),kode_bahan,sum(berat_bersih) "
                    + " from tt_pembelian_head a, tt_pembelian_detail b "
                    + " where a.no_pembelian=b.no_pembelian and a.status = 'true' and kode_gudang='" + kodeGudang + "'"
                    + " group by left(tgl_pembelian,10),kode_bahan").executeQuery();
            while (rs.next()) {
                StokBahan stok = new StokBahan();
                stok.setTanggal(rs.getString(1));
                stok.setKodeBahan(rs.getString(2));
                stok.setKodeGudang(kodeGudang);
                stok.setStokAwal(0);
                stok.setStokMasuk(rs.getDouble(3));
                stok.setStokKeluar(0);
                stok.setStokAkhir(0);
                listStokBahan.add(stok);
            }
            rs = con.prepareStatement("select left(tgl_produksi,10),kode_bahan,sum(qty) "
                    + " from tt_produksi_head a,tt_produksi_detail_bahan b "
                    + " where a.kode_produksi=b.kode_produksi and a.kode_gudang='" + kodeGudang + "' "
                    + " group by left(tgl_produksi,10),kode_bahan").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBahan s : listStokBahan) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBahan().equals(rs.getString(2))) {
                        s.setStokKeluar(s.getStokKeluar() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBahan stok = new StokBahan();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBahan(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(0);
                    stok.setStokKeluar(rs.getDouble(3));
                    stok.setStokAkhir(0);
                    listStokBahan.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_batal,10),kode_bahan,sum(qty) "
                    + " from tt_produksi_head a,tt_produksi_detail_bahan b "
                    + " where a.kode_produksi=b.kode_produksi and status='false' and a.kode_gudang='" + kodeGudang + "' "
                    + " group by left(tgl_batal,10),kode_bahan").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBahan s : listStokBahan) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBahan().equals(rs.getString(2))) {
                        s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBahan stok = new StokBahan();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBahan(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(rs.getDouble(3));
                    stok.setStokKeluar(0);
                    stok.setStokAkhir(0);
                    listStokBahan.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_penjualan,10),kode_bahan,sum(berat_bersih) "
                    + " from tt_penjualan_coil_head a,tt_penjualan_coil_detail b "
                    + " where a.no_penjualan=b.no_penjualan and kode_gudang='" + kodeGudang + "' and a.status='true' "
                    + " group by left(tgl_penjualan,10),kode_bahan").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBahan s : listStokBahan) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBahan().equals(rs.getString(2))) {
                        s.setStokKeluar(s.getStokKeluar() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBahan stok = new StokBahan();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBahan(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(0);
                    stok.setStokKeluar(rs.getDouble(3));
                    stok.setStokAkhir(0);
                    listStokBahan.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_pindah,10),kode_bahan,sum(berat_bersih) "
                    + " from tt_pindah_bahan_head a,tt_pindah_bahan_detail b "
                    + " where a.no_pindah=b.no_pindah and a.gudang_asal='" + kodeGudang + "'  and status='true' "
                    + " group by left(tgl_pindah,10), kode_bahan").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBahan s : listStokBahan) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBahan().equals(rs.getString(2))) {
                        s.setStokKeluar(s.getStokKeluar() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBahan stok = new StokBahan();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBahan(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(0);
                    stok.setStokKeluar(rs.getDouble(3));
                    stok.setStokAkhir(0);
                    listStokBahan.add(stok);
                }
            }
            rs = con.prepareStatement("select left(tgl_pindah,10),kode_bahan,sum(berat_bersih) "
                    + " from tt_pindah_bahan_head a,tt_pindah_bahan_detail b "
                    + " where a.no_pindah=b.no_pindah and a.gudang_tujuan='" + kodeGudang + "'  and status='true' "
                    + " group by left(tgl_pindah,10), kode_bahan").executeQuery();
            while (rs.next()) {
                boolean status = true;
                for (StokBahan s : listStokBahan) {
                    if (s.getTanggal().equals(rs.getString(1))
                            && s.getKodeBahan().equals(rs.getString(2))) {
                        s.setStokMasuk(s.getStokMasuk() + rs.getDouble(3));
                        status = false;
                    }
                }
                if (status) {
                    StokBahan stok = new StokBahan();
                    stok.setTanggal(rs.getString(1));
                    stok.setKodeBahan(rs.getString(2));
                    stok.setKodeGudang(kodeGudang);
                    stok.setStokAwal(0);
                    stok.setStokMasuk(rs.getDouble(3));
                    stok.setStokKeluar(0);
                    stok.setStokAkhir(0);
                    listStokBahan.add(stok);
                }
            }
            Collections.sort(listStokBahan, (Object o1, Object o2) -> {
                int sComp = ((StokBahan) o1).getKodeBahan().compareTo(((StokBahan) o2).getKodeBahan());
                if (sComp != 0) {
                    return sComp;
                }
                return ((StokBahan) o1).getTanggal().compareTo(((StokBahan) o2).getTanggal());
            });
            double stok = 0;
            List<StokBahan> listStok = new ArrayList<>();
            for (StokBahan s : listStokBahan) {
                boolean status = true;
                for (StokBahan st : listStok) {
                    if (st.getKodeBahan().equals(s.getKodeBahan())) {
                        status = false;
                    }
                }
                if (status) {
                    stok = 0;
                }
                s.setStokAwal(stok);
                stok = stok + s.getStokMasuk() - s.getStokKeluar();
                s.setStokAkhir(stok);

                listStok.add(s);
            }
            for (StokBahan s : listStokBahan) {
                System.out.println(new Date() + " " + s.getTanggal() + " : " + s.getKodeBahan()+ " - " + s.getKodeGudang());
                PreparedStatement ps = con.prepareStatement("insert into tt_stok_bahan_temp values(?,?,?,?,?,?,?)");
                ps.setString(1, s.getTanggal());
                ps.setString(2, s.getKodeBahan());
                ps.setString(3, s.getKodeGudang());
                ps.setDouble(4, s.getStokAwal());
                ps.setDouble(5, s.getStokMasuk());
                ps.setDouble(6, s.getStokKeluar());
                ps.setDouble(7, s.getStokAkhir());
                ps.executeUpdate();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_recreateStokBahanActionPerformed

    private void recreateLogBahanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recreateLogBahanActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            List<LogBahan> listLogBahan = new ArrayList<>();
            PreparedStatement ps = con.prepareStatement("select tgl_pembelian,b.kode_bahan,'Pembelian',a.no_pembelian,0,0,b.berat_bersih,c.harga_beli,0,0,0,0 "
                    + " from tt_pembelian_head a, tt_pembelian_detail b,tm_bahan c "
                    + " where a.no_pembelian=b.no_pembelian and b.kode_bahan=c.kode_bahan and a.status = 'true'");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                LogBahan log = new LogBahan();
                log.setTanggal(rs.getString(1));
                log.setKodeBahan(rs.getString(2));
                log.setKategori(rs.getString(3));
                log.setKeterangan(rs.getString(4));
                log.setStokAwal(rs.getDouble(5));
                log.setNilaiAwal(rs.getDouble(6));
                log.setStokMasuk(rs.getDouble(7));
                log.setNilaiMasuk(rs.getDouble(8));
                log.setStokKeluar(rs.getDouble(9));
                log.setNilaiKeluar(rs.getDouble(10));
                log.setStokAkhir(rs.getDouble(11));
                log.setNilaiAkhir(rs.getDouble(12));
                listLogBahan.add(log);
            }
            ps = con.prepareStatement("select tgl_produksi,kode_bahan,'Produksi',kode_produksi,0,0,0,0,berat_diproduksi,material_cost,0,0 "
                    + " from tt_produksi_head ");
            rs = ps.executeQuery();
            while (rs.next()) {
                LogBahan log = new LogBahan();
                log.setTanggal(rs.getString(1));
                log.setKodeBahan(rs.getString(2));
                log.setKategori(rs.getString(3));
                log.setKeterangan(rs.getString(4));
                log.setStokAwal(rs.getDouble(5));
                log.setNilaiAwal(rs.getDouble(6));
                log.setStokMasuk(rs.getDouble(7));
                log.setNilaiMasuk(rs.getDouble(8));
                log.setStokKeluar(rs.getDouble(9));
                log.setNilaiKeluar(rs.getDouble(10));
                log.setStokAkhir(rs.getDouble(11));
                log.setNilaiAkhir(rs.getDouble(12));
                listLogBahan.add(log);
            }
            ps = con.prepareStatement("select tgl_batal,kode_bahan,'Batal Produksi',kode_produksi,"
                    + "0,0,berat_diproduksi,material_cost,0,0,0,0,tgl_produksi,kode_user,user_batal "
                    + " from tt_produksi_head where status='false' ");
            rs = ps.executeQuery();
            while (rs.next()) {
                LogBahan log = new LogBahan();
                log.setTanggal(rs.getString(1));
                log.setKodeBahan(rs.getString(2));
                log.setKategori(rs.getString(3));
                log.setKeterangan(rs.getString(4));
                log.setStokAwal(rs.getDouble(5));
                log.setNilaiAwal(rs.getDouble(6));
                log.setStokMasuk(rs.getDouble(7));
                log.setNilaiMasuk(rs.getDouble(8));
                log.setStokKeluar(rs.getDouble(9));
                log.setNilaiKeluar(rs.getDouble(10));
                log.setStokAkhir(rs.getDouble(11));
                log.setNilaiAkhir(rs.getDouble(12));
                listLogBahan.add(log);

                SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                Date tglProduksi = date.parse(rs.getString(13).substring(0, 10));
                Keuangan k = new Keuangan();
                k.setNoKeuangan(KeuanganDAO.getId(con, tglProduksi));
                k.setTglKeuangan(rs.getString(13));
                k.setTipeKeuangan("Stok Bahan");
                k.setKategori("Stok Bahan");
                k.setDeskripsi("Produksi Barang - " + rs.getString(4));
                k.setJumlahRp(-rs.getDouble(8));
                k.setKodeUser(rs.getString(14));
                KeuanganDAO.insert(con, k);

                Date tglBatal = date.parse(rs.getString(1).substring(0, 10));
                Keuangan k2 = new Keuangan();
                k2.setNoKeuangan(KeuanganDAO.getId(con, tglBatal));
                k2.setTglKeuangan(rs.getString(1));
                k2.setTipeKeuangan("Stok Bahan");
                k2.setKategori("Stok Bahan");
                k2.setDeskripsi("Batal Produksi Barang - " + rs.getString(4));
                k2.setJumlahRp(rs.getDouble(8));
                k2.setKodeUser(rs.getString(15));
                KeuanganDAO.insert(con, k2);
            }
            ps = con.prepareStatement("select tgl_penjualan,b.kode_bahan,'Penjualan',a.no_penjualan,0,0,0,0,b.berat_bersih,nilai*b.berat_bersih,0,0 "
                    + " from tt_penjualan_coil_head a,tt_penjualan_coil_detail b "
                    + " where a.no_penjualan=b.no_penjualan and a.status='true' ");
            rs = ps.executeQuery();
            while (rs.next()) {
                LogBahan log = new LogBahan();
                log.setTanggal(rs.getString(1));
                log.setKodeBahan(rs.getString(2));
                log.setKategori(rs.getString(3));
                log.setKeterangan(rs.getString(4));
                log.setStokAwal(rs.getDouble(5));
                log.setNilaiAwal(rs.getDouble(6));
                log.setStokMasuk(rs.getDouble(7));
                log.setNilaiMasuk(rs.getDouble(8));
                log.setStokKeluar(rs.getDouble(9));
                log.setNilaiKeluar(rs.getDouble(10));
                log.setStokAkhir(rs.getDouble(11));
                log.setNilaiAkhir(rs.getDouble(12));
                listLogBahan.add(log);
            }
            Collections.sort(listLogBahan, (Object o1, Object o2) -> {
                int sComp = ((LogBahan) o1).getKodeBahan().compareTo(((LogBahan) o2).getKodeBahan());
                if (sComp != 0) {
                    return sComp;
                }
                return ((LogBahan) o1).getTanggal().compareTo(((LogBahan) o2).getTanggal());
            });
            double stok = 0;
            double nilai = 0;
            List<LogBahan> listStok = new ArrayList<>();
            for (LogBahan s : listLogBahan) {
                boolean status = true;
                for (LogBahan st : listStok) {
                    if (st.getKodeBahan().equals(s.getKodeBahan())) {
                        status = false;
                    }
                }
                if (status) {
                    stok = 0;
                    nilai = 0;
                }
                s.setStokAwal(stok);
                s.setNilaiAwal(nilai);

                stok = stok + s.getStokMasuk() - s.getStokKeluar();
                nilai = nilai + s.getNilaiMasuk() - s.getNilaiKeluar();

                s.setStokAkhir(stok);
                s.setNilaiAkhir(nilai);

                listStok.add(s);
                System.out.println(s.getTanggal() + " - " + s.getKodeBahan());
            }
            for (LogBahan s : listLogBahan) {
                ps = con.prepareStatement("insert into tt_log_bahan_temp values(?,?,?,?,?,?,?,?,?,?,?,?)");
                ps.setString(1, s.getTanggal());
                ps.setString(2, s.getKodeBahan());
                ps.setString(3, s.getKategori());
                ps.setString(4, s.getKeterangan());
                ps.setDouble(5, s.getStokAwal());
                ps.setDouble(6, s.getNilaiAwal());
                ps.setDouble(7, s.getStokMasuk());
                ps.setDouble(8, s.getNilaiMasuk());
                ps.setDouble(9, s.getStokKeluar());
                ps.setDouble(10, s.getNilaiKeluar());
                ps.setDouble(11, s.getStokAkhir());
                ps.setDouble(12, s.getNilaiAkhir());
                ps.executeUpdate();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_recreateLogBahanActionPerformed

    private void recreateLogBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recreateLogBarangActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            List<LogBarang> listLogBarang = new ArrayList<>();
            ResultSet rs = con.prepareStatement("select '2016-01-01',kode_barang from tm_barang "
                    + "where status = 'true'").executeQuery();
            while (rs.next()) {
                LogBarang log = new LogBarang();
                log.setTanggal(rs.getString(1));
                log.setKodeBarang(rs.getString(2));
                log.setKategori("New Barang");
                log.setKeterangan("");
                log.setStokAwal(0);
                log.setNilaiAwal(0);
                log.setStokMasuk(0);
                log.setNilaiMasuk(0);
                log.setStokKeluar(0);
                log.setNilaiKeluar(0);
                log.setStokAkhir(0);
                log.setNilaiAkhir(0);
                listLogBarang.add(log);
            }
            rs = con.prepareStatement("select tgl_produksi,kode_barang,a.kode_produksi,sum(qty),sum(nilai) "
                    + " from tt_produksi_head a,tt_produksi_detail b "
                    + " where a.kode_produksi=b.kode_produksi "
                    + " group by a.kode_produksi,kode_barang").executeQuery();
            while (rs.next()) {
                LogBarang log = new LogBarang();
                log.setTanggal(rs.getString(1));
                log.setKodeBarang(rs.getString(2));
                log.setKategori("Produksi");
                log.setKeterangan(rs.getString(3));
                log.setStokAwal(0);
                log.setNilaiAwal(0);
                log.setStokMasuk(rs.getDouble(4));
                log.setNilaiMasuk(rs.getDouble(5));
                log.setStokKeluar(0);
                log.setNilaiKeluar(0);
                log.setStokAkhir(0);
                log.setNilaiAkhir(0);
                listLogBarang.add(log);
            }
            rs = con.prepareStatement("select tgl_batal,kode_barang,a.kode_produksi,sum(qty),sum(nilai),"
                    + "tgl_produksi,kode_user,user_batal "
                    + " from tt_produksi_head a,tt_produksi_detail b "
                    + " where a.kode_produksi=b.kode_produksi and status ='false' "
                    + " group by a.kode_produksi,kode_barang").executeQuery();
            while (rs.next()) {
                LogBarang log = new LogBarang();
                log.setTanggal(rs.getString(1));
                log.setKodeBarang(rs.getString(2));
                log.setKategori("Batal Produksi");
                log.setKeterangan(rs.getString(3));
                log.setStokAwal(0);
                log.setNilaiAwal(0);
                log.setStokMasuk(0);
                log.setNilaiMasuk(0);
                log.setStokKeluar(rs.getDouble(4));
                log.setNilaiKeluar(rs.getDouble(5));
                log.setStokAkhir(0);
                log.setNilaiAkhir(0);
                listLogBarang.add(log);

                Date tglProduksi = new SimpleDateFormat("yyyy-MM-dd").parse(rs.getString(6).substring(0, 10));
                Keuangan k = new Keuangan();
                k.setNoKeuangan(KeuanganDAO.getId(con, tglProduksi));
                k.setTglKeuangan(rs.getString(6));
                k.setTipeKeuangan("Stok Barang");
                k.setKategori(rs.getString(2));
                k.setDeskripsi("Produksi Barang - " + rs.getString(3));
                k.setJumlahRp(rs.getDouble(5));
                k.setKodeUser(rs.getString(7));
                KeuanganDAO.insert(con, k);

                Date tglBatal = new SimpleDateFormat("yyyy-MM-dd").parse(rs.getString(1).substring(0, 10));
                Keuangan k2 = new Keuangan();
                k2.setNoKeuangan(KeuanganDAO.getId(con, tglBatal));
                k2.setTglKeuangan(rs.getString(1));
                k2.setTipeKeuangan("Stok Barang");
                k2.setKategori(rs.getString(2));
                k2.setDeskripsi("Batal Produksi Barang - " + rs.getString(3));
                k2.setJumlahRp(-rs.getDouble(5));
                k2.setKodeUser(rs.getString(8));
                KeuanganDAO.insert(con, k2);
            }
            rs = con.prepareStatement("select tgl_penjualan,kode_barang,a.no_penjualan,sum(qty),sum(qty*nilai) "
                    + " from tt_penjualan_head a,tt_penjualan_detail b "
                    + " where a.no_penjualan=b.no_penjualan and status ='true' "
                    + " group by a.no_penjualan,kode_barang").executeQuery();
            while (rs.next()) {
                LogBarang log = new LogBarang();
                log.setTanggal(rs.getString(1));
                log.setKodeBarang(rs.getString(2));
                log.setKategori("Penjualan");
                log.setKeterangan(rs.getString(3));
                log.setStokAwal(0);
                log.setNilaiAwal(0);
                log.setStokMasuk(0);
                log.setNilaiMasuk(0);
                log.setStokKeluar(rs.getDouble(4));
                log.setNilaiKeluar(rs.getDouble(5));
                log.setStokAkhir(0);
                log.setNilaiAkhir(0);
                listLogBarang.add(log);
            }
            rs = con.prepareStatement("select tgl_retur,kode_barang,a.no_retur_penjualan,sum(qty),sum(qty*nilai) "
                    + " from tt_retur_penjualan_head a,tt_retur_penjualan_detail b "
                    + " where a.no_retur_penjualan=b.no_retur_penjualan and status ='true' "
                    + " group by a.no_retur_penjualan,kode_barang").executeQuery();
            while (rs.next()) {
                LogBarang log = new LogBarang();
                log.setTanggal(rs.getString(1));
                log.setKodeBarang(rs.getString(2));
                log.setKategori("Retur Penjualan");
                log.setKeterangan(rs.getString(3));
                log.setStokAwal(0);
                log.setNilaiAwal(0);
                log.setStokMasuk(rs.getDouble(4));
                log.setNilaiMasuk(rs.getDouble(5));
                log.setStokKeluar(0);
                log.setNilaiKeluar(0);
                log.setStokAkhir(0);
                log.setNilaiAkhir(0);
                listLogBarang.add(log);
            }
            Collections.sort(listLogBarang, (Object o1, Object o2) -> {
                int sComp = ((LogBarang) o1).getKodeBarang().compareTo(((LogBarang) o2).getKodeBarang());
                if (sComp != 0) {
                    return sComp;
                }
                return ((LogBarang) o1).getTanggal().compareTo(((LogBarang) o2).getTanggal());
            });
            double stok = 0;
            double nilai = 0;
            List<LogBarang> listStok = new ArrayList<>();
            for (LogBarang s : listLogBarang) {
                boolean status = true;
                for (LogBarang st : listStok) {
                    if (st.getKodeBarang().equals(s.getKodeBarang())) {
                        status = false;
                    }
                }
                if (status) {
                    stok = 0;
                    nilai = 0;
                }
                s.setStokAwal(stok);
                s.setNilaiAwal(nilai);

                stok = stok + s.getStokMasuk() - s.getStokKeluar();
                nilai = nilai + s.getNilaiMasuk() - s.getNilaiKeluar();

                s.setStokAkhir(stok);
                s.setNilaiAkhir(nilai);

                listStok.add(s);
            }
            for (LogBarang s : listLogBarang) {
                PreparedStatement ps = con.prepareStatement("insert into tt_log_barang_temp values(?,?,?,?,?,?,?,?,?,?,?,?)");
                ps.setString(1, s.getTanggal());
                ps.setString(2, s.getKodeBarang());
                ps.setString(3, s.getKategori());
                ps.setString(4, s.getKeterangan());
                ps.setDouble(5, s.getStokAwal());
                ps.setDouble(6, s.getNilaiAwal());
                ps.setDouble(7, s.getStokMasuk());
                ps.setDouble(8, s.getNilaiMasuk());
                ps.setDouble(9, s.getStokKeluar());
                ps.setDouble(10, s.getNilaiKeluar());
                ps.setDouble(11, s.getStokAkhir());
                ps.setDouble(12, s.getNilaiAkhir());
                ps.executeUpdate();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_recreateLogBarangActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            con.prepareStatement("update tm_customer set hutang = 0, deposit = 0 ").executeUpdate();
            PreparedStatement ps = con.prepareStatement("select kode_customer,sum(sisa_down_payment) from tt_pemesanan_head "
                    + "where status = 'open' and sisa_down_payment>0 group by kode_customer;");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Customer c = CustomerDAO.get(con, rs.getString(1));
                c.setDeposit(rs.getDouble(2));
                CustomerDAO.update(con, c);
                System.out.println(new Date() + " - deposit " + c.getNama());
            }
            ps = con.prepareStatement("select kode_customer,sum(sisa_pembayaran) from tt_penjualan_head "
                    + "where status = 'true' and sisa_pembayaran>0 group by kode_customer;");
            rs = ps.executeQuery();
            while (rs.next()) {
                Customer c = CustomerDAO.get(con, rs.getString(1));
                c.setHutang(rs.getDouble(2));
                CustomerDAO.update(con, c);
                System.out.println(new Date() + " - hutang " + c.getNama());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try (Connection con = Koneksi.getConnection()) {
            System.out.println(new Date()+" start");
//            PembelianHead p = PembelianHeadDAO.get(con, noPembelianField.getText());
//            List<PembelianDetail> detail = PembelianDetailDAO.getAllByNoPembelian(con, noPembelianField.getText());
//            double totalBerat = 0;
//            for (PembelianDetail d : detail) {
//                totalBerat = totalBerat + d.getBeratBersih();
//            }
//            double bebanPerKg = p.getTotalBebanPembelian() / totalBerat;
//            List<String> listPindahBahan = new ArrayList<>();
//            List<String> listProduksi = new ArrayList<>();
//            List<String> listBatalProduksi = new ArrayList<>();
//            List<String> listPenjualan = new ArrayList<>();
//            for (PembelianDetail d : detail) {
//                System.out.println(new Date()+" start update tm bahan & log bahan "+d.getKodeBahan());
//                Bahan b = BahanDAO.get(con, d.getKodeBahan());
//                b.setHargaBeli(d.getTotal() + (bebanPerKg * d.getBeratBersih()));
//                BahanDAO.update(con, b);
//
//                double hargaPerKg = b.getHargaBeli() / b.getBeratBersih();
//                List<LogBahan> listLogBahan = LogBahanDAO.getAllByTanggalAndBahanAndGudang(
//                        con, "2000-01-01", "2100-01-01", d.getKodeBahan(), "%");
//                for (LogBahan l : listLogBahan) {
//                    l.setNilaiAwal(l.getStokAwal() * hargaPerKg);
//                    l.setNilaiMasuk(l.getStokMasuk() * hargaPerKg);
//                    l.setNilaiKeluar(l.getStokKeluar() * hargaPerKg);
//                    l.setNilaiAkhir(l.getStokAkhir() * hargaPerKg);
//                    LogBahanDAO.update(con, l);
//
//                    if (l.getKategori().equals("Pindah Bahan") && !listPindahBahan.contains(l.getKeterangan())) {
//                        listPindahBahan.add(l.getKeterangan());
//                    }
//                    if (l.getKategori().equals("Produksi") && !listProduksi.contains(l.getKeterangan())) {
//                        listProduksi.add(l.getKeterangan());
//                    }
//                    if (l.getKategori().equals("Batal Produksi") && !listBatalProduksi.contains(l.getKeterangan())) {
//                        listBatalProduksi.add(l.getKeterangan());
//                    }
//                    if (l.getKategori().equals("Penjualan") && !listPenjualan.contains(l.getKeterangan())) {
//                        listPenjualan.add(l.getKeterangan());
//                    }
//                }
//                System.out.println(new Date()+" finish update tm bahan & log bahan "+d.getKodeBahan());
//            }
//            //pindah bahan
//            con.prepareStatement("update tt_pindah_bahan_detail a, tm_bahan b "
//                    + " set a.nilai = b.harga_beli where a.kode_bahan = b.kode_bahan").executeUpdate();
//            for(String noPindah : listPindahBahan){
//                System.out.println(new Date()+" start update pindah bahan "+noPindah);
//                double total = 0;
//                List<PindahBahanDetail> pindahDetail = PindahBahanDetailDAO.getAllPindahBahanDetail(con, noPindah);
//                for(PindahBahanDetail d : pindahDetail){
//                    total = total + d.getNilai();
//                }
//                //update tt keuangan
//                PindahBahanHead pb = PindahBahanHeadDAO.get(con, noPindah);
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+total*-1+" "
//                        + " where tipe_keuangan = 'Stok Bahan' and kategori = '"+pb.getGudangAsal()+"' "
//                        + " and deskripsi like 'Pindah Bahan - "+noPindah+"' ").executeUpdate();
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+total+" "
//                        + " where tipe_keuangan = 'Stok Bahan' and kategori = '"+pb.getGudangTujuan()+"' "
//                        + " and deskripsi like 'Pindah Bahan - "+noPindah+"' ").executeUpdate();
//                System.out.println(new Date()+" finish update pindah bahan "+noPindah);
//            }
//            //penjualan
//            con.prepareStatement("update tt_penjualan_coil_detail a, tm_bahan b "
//                    + " set a.nilai = b.harga_beli/b.berat_bersih where a.kode_bahan = b.kode_bahan").executeUpdate();
//            for(String noPenjualan : listPenjualan){
//                System.out.println(new Date()+" start update penjualan coil "+noPenjualan);
//                double total = 0;
//                List<PenjualanCoilDetail> allDetail = PenjualanCoilDetailDAO.getAllPenjualanCoilDetail(con, noPenjualan);
//                for(PenjualanCoilDetail d : allDetail){
//                    total = total + (d.getNilai()*d.getBeratBersih());
//                }
//                PenjualanCoilHead pj = PenjualanCoilHeadDAO.get(con, noPenjualan);
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+total+" "
//                        + " where tipe_keuangan = 'HPP' and kategori = 'Penjualan Coil' "
//                        + " and deskripsi like 'Penjualan Coil - "+noPenjualan+"' ").executeUpdate();
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+total*-1+" "
//                        + " where tipe_keuangan = 'Stok Bahan' and kategori = '"+pj.getKodeGudang()+"' "
//                        + " and deskripsi like 'Penjualan Coil - "+noPenjualan+"' ").executeUpdate();
//                System.out.println(new Date()+" finish update penjualan coil "+noPenjualan);
//            }
//            //produksi
//            con.prepareStatement("update tt_produksi_detail_bahan a, tm_bahan b "
//                    + " set a.nilai = a.qty/b.berat_bersih*b.harga_beli where a.kode_bahan = b.kode_bahan").executeUpdate();
//            for(String noProduksi : listProduksi){
//                System.out.println(new Date()+" start update produksi "+noProduksi);
//                double materialCost = 0;
//                double beratDiproduksi = 0;
//                List<ProduksiDetailBahan> allDetail = ProduksiDetailBahanDAO.get(con, noProduksi);
//                for(ProduksiDetailBahan d : allDetail){
//                    materialCost = materialCost + d.getNilai();
//                    beratDiproduksi = beratDiproduksi + d.getQty();
//                }
//                ProduksiHead pr = ProduksiHeadDAO.get(con, noProduksi);
//                    System.out.println(materialCost);
//                pr.setMaterialCost(materialCost);
//                ProduksiHeadDAO.update(con, pr);
//                
//                double totalQty = 0;
//                List<ProduksiDetailBarang> detailBarang = ProduksiDetailBarangDAO.get(con, noProduksi);
//                for(ProduksiDetailBarang d : detailBarang){
//                    System.out.println(d.getKodeProduksi());
//                    double qty = d.getQty();
//                    List<FormulaProduksi> listFormula = FormulaProduksiDAO.getAllByKodeBarang(con, d.getKodeBarang());
//                    for(FormulaProduksi f : listFormula){
//                        qty = qty * f.getQty();
//                    }
//                    totalQty = totalQty + qty;
//                }
//                for(ProduksiDetailBarang d : detailBarang){
//                    double qty = d.getQty();
//                    List<FormulaProduksi> listFormula = FormulaProduksiDAO.getAllByKodeBarang(con, d.getKodeBarang());
//                    for(FormulaProduksi f : listFormula){
//                        qty = qty * f.getQty();
//                    }
//                    d.setNilai(materialCost*qty/totalQty);
//                    ProduksiDetailBarangDAO.update(con, d);
//                    
//                    LogBarang l = LogBarangDAO.get(con, d.getKodeBarang(), pr.getKodeGudang(), "Produksi", noProduksi);
//                    System.out.println(d.getNilai());
//                    l.setNilaiMasuk(d.getNilai());
//                    LogBarangDAO.update(con, l);
//                }
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+materialCost+" "
//                        + " where tipe_keuangan = 'Stok Barang' and kategori = '"+pr.getKodeGudang()+"' "
//                        + " and deskripsi like 'Produksi Barang - "+noProduksi+"' ").executeUpdate();
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+materialCost*-1+" "
//                        + " where tipe_keuangan = 'Stok Bahan' and kategori = '"+pr.getKodeGudang()+"' "
//                        + " and deskripsi like 'Produksi Barang - "+noProduksi+"' ").executeUpdate();
//                System.out.println(new Date()+" finish update produksi "+noProduksi);
//            }
//            //batal produksi
//            for(String noProduksi : listBatalProduksi){
//                System.out.println(new Date()+" start update batal produksi "+noProduksi);
//                double materialCost = 0;
//                List<ProduksiDetailBahan> allDetail = ProduksiDetailBahanDAO.get(con, noProduksi);
//                for(ProduksiDetailBahan d : allDetail){
//                    materialCost = materialCost + d.getNilai();
//                }
//                ProduksiHead pr = ProduksiHeadDAO.get(con, noProduksi);
//                
//                List<ProduksiDetailBarang> detailBarang =ProduksiDetailBarangDAO.get(con, noProduksi);
//                for(ProduksiDetailBarang d : detailBarang){
//                    LogBarang l = LogBarangDAO.get(con, d.getKodeBarang(), pr.getKodeGudang(), "Batal Produksi", noProduksi);
//                    l.setNilaiKeluar(d.getNilai());
//                    LogBarangDAO.update(con, l);
//                }
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+materialCost*-1+" "
//                        + " where tipe_keuangan = 'Stok Barang' and kategori = '"+pr.getKodeGudang()+"' "
//                        + " and deskripsi like 'Batal Produksi Barang - "+noProduksi+"' ").executeUpdate();
//                con.prepareStatement("update tt_keuangan set jumlah_rp = "+materialCost+" "
//                        + " where tipe_keuangan = 'Stok Bahan' and kategori = '"+pr.getKodeGudang()+"' "
//                        + " and deskripsi like 'Batal Produksi Barang - "+noProduksi+"' ").executeUpdate();
//                System.out.println(new Date()+" finish update batal produksi "+noProduksi);
//            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try(Connection con  = Koneksi.getConnection()){
//            System.out.println("\n\n\n"+tanggalField.getText());
//            String tanggal = tanggalField.getText();
//            List<KategoriPiutang> listKategoriPiutang = KategoriPiutangDAO.getAll(con);
//            KategoriPiutang pp = new KategoriPiutang();
//            pp.setKodeKategori("Piutang Penjualan");
//            listKategoriPiutang.add(pp);
//            for(KategoriPiutang kp : listKategoriPiutang){
//                double saldoPiutang = KeuanganDAO.getSaldoAkhir(con, tanggal, "Piutang", kp.getKodeKategori());
//                
//                List<Piutang> allPiutang = PiutangDAO.getAllByDateAndKategoriAndStatus(
//                        con, "2000-01-01", tanggal, kp.getKodeKategori(), "%");
//                List<TerimaPembayaran> listPembayaran = TerimaPembayaranDAO.getAllByTglTerima(
//                        con, "2000-01-01", tanggal, "true");
//                double saldoAkhir = 0;
//                for(Piutang pt : allPiutang){
//                    pt.setSisaPiutang(pt.getJumlahPiutang());
//                    for(TerimaPembayaran p : listPembayaran){
//                        if(pt.getNoPiutang().equals(p.getNoPiutang())){
//                            pt.setSisaPiutang(pt.getSisaPiutang() - p.getJumlahPembayaran());
//                        }
//                    }
//                    if(pt.getSisaPiutang()>1){
//                        saldoAkhir = saldoAkhir + pt.getSisaPiutang();
//                    }else{
////                        System.out.println(pt.getNoPiutang()+" - "+pt.getSisaPiutang());
//                    }
//                }
//                boolean status;
//                if(new DecimalFormat("###,##0").format(saldoAkhir).equals(new DecimalFormat("###,##0").format(saldoPiutang)))
//                    status = true;
//                else
//                    status = false;
//                System.out.println(kp.getKodeKategori()+" - "+status+
//                        " : "+new DecimalFormat("###,##0").format(saldoPiutang)+" vs "+new DecimalFormat("###,##0").format(saldoAkhir));
//                
//            }
//            
//            List<KategoriHutang> listKategoriHutang = KategoriHutangDAO.getAll(con);
//            KategoriHutang hp = new KategoriHutang();
//            hp.setKodeKategori("Hutang Pembelian");
//            listKategoriHutang.add(hp);
//            KategoriHutang dp = new KategoriHutang();
//            dp.setKodeKategori("Terima Pembayaran Down Payment");
//            listKategoriHutang.add(dp);
//            for(KategoriHutang kp : listKategoriHutang){
//                double saldohutang = KeuanganDAO.getSaldoAkhir(con, tanggal, "Hutang", kp.getKodeKategori());
//                
//                List<Hutang> allHutang = HutangDAO.getAllByTanggalAndKategoriAndStatus(
//                        con, "2000-01-01", tanggal, kp.getKodeKategori(), "%");
//                List<Pembayaran> listPembayaran = PembayaranDAO.getAllByTglBayar(
//                        con, "2000-01-01", tanggal, "true");
//                double saldoAkhir = 0;
//                for(Hutang ht : allHutang){
//                    ht.setSisaHutang(ht.getJumlahHutang());
//                    for(Pembayaran p : listPembayaran){
//                        if(ht.getNoHutang().equals(p.getNoHutang())){
//                            ht.setSisaHutang(ht.getSisaHutang() - p.getJumlahPembayaran());
//                        }
//                    }
//                    if(ht.getSisaHutang()>1){
//                        saldoAkhir = saldoAkhir + ht.getSisaHutang();
//                    }
//                }
//                boolean status;
//                if(new DecimalFormat("###,##0").format(saldoAkhir).equals(new DecimalFormat("###,##0").format(saldohutang)))
//                    status = true;
//                else
//                    status = false;
//                System.out.println(kp.getKodeKategori()+" - "+status+
//                        " : "+new DecimalFormat("###,##0").format(saldohutang)+" vs "+new DecimalFormat("###,##0").format(saldoAkhir));
//            }
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tanggalFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanggalFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tanggalFieldActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try(Connection con  = Koneksi.getConnection()){
//            System.out.println("\n\n\n"+tanggalField.getText());
//            String tanggal = tanggalField.getText();
//            List<Gudang> listGudang = GudangDAO.getAll(con);
//            for(Gudang g : listGudang){
//                double stokBahan = KeuanganDAO.getSaldoAkhir(con, tanggal, "Stok Bahan", g.getKodeGudang());
//                double saldoBahan = 0;
//                ResultSet rs = con.prepareStatement("SELECT sum(a.stok_akhir/c.berat_bersih*c.harga_beli) " +
//                    " FROM tt_stok_bahan a " +
//                    " JOIN ( " +
//                    "  SELECT MAX(tanggal) as tanggal, kode_bahan FROM tt_stok_bahan " +
//                    "  WHERE kode_gudang = '"+g.getKodeGudang()+"' and tanggal <= '"+tanggal+"' " +
//                    "  GROUP BY kode_bahan " +
//                    " ) AS b ON a.kode_bahan = b.kode_bahan AND a.tanggal = b.tanggal " +
//                    " JOIN ( " +
//                    "  SELECT * FROM tm_bahan " +
//                    " ) AS c ON a.kode_bahan = c.kode_bahan " +
//                    " where kode_gudang = '"+g.getKodeGudang()+"' and a.tanggal <= '"+tanggal+"'").executeQuery();
//                if(rs.next()){
//                    saldoBahan = rs.getDouble(1);
//                }
//                System.out.println("Stok Bahan "+g.getKodeGudang()+
//                        " "+new DecimalFormat("###,##0").format(saldoBahan)+" vs "+new DecimalFormat("###,##0").format(stokBahan)+
//                        " = "+new DecimalFormat("###,##0").format(saldoBahan-stokBahan));
//
//                double stokBarang = KeuanganDAO.getSaldoAkhir(con, tanggal, "Stok Barang", g.getKodeGudang());
//                double saldoBarang = 0;
//                rs = con.prepareStatement("SELECT sum(a.nilai_akhir) " +
//                    " FROM tt_log_barang a " +
//                    " JOIN ( " +
//                    " SELECT MAX(tanggal) as tanggal, kode_barang as barang " +
//                    " FROM tt_log_barang " +
//                    " WHERE kode_gudang = '"+g.getKodeGudang()+"' and left(tanggal,10) <= '"+tanggal+"' " +
//                    " GROUP BY barang " +
//                    ") AS b ON a.kode_barang = b.barang AND a.tanggal = b.tanggal " +
//                    "where kode_gudang = '"+g.getKodeGudang()+"' and left(a.tanggal,10) <= '"+tanggal+"'").executeQuery();
//                if(rs.next()){
//                    saldoBarang= rs.getDouble(1);
//                }
//                System.out.println("Stok Barang "+g.getKodeGudang()+
//                        " "+new DecimalFormat("###,##0").format(saldoBarang)+" vs "+new DecimalFormat("###,##0").format(stokBarang)+
//                        " = "+new DecimalFormat("###,##0").format(saldoBarang-stokBarang));
//
//            }
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField kodeBarangStokBarangField;
    private javax.swing.JTextField noPembelianField;
    private javax.swing.JButton recreateLogBahan;
    private javax.swing.JButton recreateLogBarang;
    private javax.swing.JButton recreateStokBahan;
    private javax.swing.JButton recreateStokBarang;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JTextField tanggalField;
    // End of variables declaration//GEN-END:variables
}
